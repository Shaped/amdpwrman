#!/bin/bash
#amdpwrman (C) 2020 Jai B. Shaped Technologies (MIT License)
#script for managing amdgpus through sysfs interface of amdgpu driver

me="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
mycmd="$0 $1 $2 $3 $4"
myuser=`whoami`
version="0.04a"
isnum='^[0-9]+$'
wait=0.5
longwait=5
fanwait=5
parent=$(ps -o comm= $PPID)

checkbashver () {
    IFS='.' read -r -a bashvers <<< $BASH_VERSION
    if ! (( bashvers[0] >= 4 )) ; then
	echo "BASH 4+ is required."
	echo ; exit 1
    fi
}

log () {
	now=`date +"%D %T"`
	echo "[${now}] $1"
}

dover () {
  echo "$me $version        (C) 2020 Jai B. (Shaped Technologies)        MIT License"
  echo
}

usage () {
  dover

  echo "$me shows statistics and manipulates power limit settings for AMD GPUs"
  echo "on Linux through the sysfs interface provided by the amdgpu driver. This script"
  echo "was designed to be very simple to use from the shell, requiring no external"
  echo "configuration."
  echo
  echo "All values are reported by the sysfs interface provided by the amdgpu driver,"
  echo "sometimes these values may not be \"perfect\", for example on an RX570, the max"
  echo "RPM of the fan is reported as 5300 RPM but at 100% fan speed the fan only hits"
  echo "3300 RPM. I've also noticed this behavior with apps on Windows even, so it is"
  echo "not isolated to Linux, nor is it an issue with this script."
  echo
  echo "Note: $me will require root access to modify values."
  echo "Attempting to recover a GPU may require the amdgpu.gpu_recovery=1 kernel flag."
  echo
  echo "Usage:"
  echo "   If <gpu> is ommitted from any command, GPU0 is used."
#TODO
#  echo "   <gpu> can also be 'all' for all gpus for all commands, except recover"
  echo
  echo "   $me help | -h              Display this help message."
  echo "   $me show <gpu>             Shows detailed statistics for <gpu>"
  echo "   $me status <gpu>           Same as above"
  echo "   $me power <limit> <gpu>    Sets power limit to <limit> in watts for <gpu>"
  echo "   $me power reset <gpu>      Resets power limit for <gpu>"
  echo "   $me recover <gpu>          Attempt to recover a halted or crashed <gpu>"
  echo "   $me fan enable <gpu>       Enables manual fan speed control for <gpu>"
  echo "   $me fan disable <gpu>      Disables manual fan speed control for <gpu>"
  echo "   $me fan <speed> <gpu>      Sets fan speed for <gpu>"
  echo "   $me fancurve enable <gpu>  Enables fan curve daemon for <gpu>"
  echo "   $me fancurve disable <gpu> Disables the fancurve daemon for <gpu>"
#  echo "   $me fancurve set [delay] [fancurves] <gpu>"
#  echo "                                    Sets the fan curve and delay for <gpu>"
  echo
  echo "   <gpu> refers to the number of the GPU reported by the amdgpu driver."
  echo
  echo "  The fan curve daemon does not need to be running for manual fan control,"
  echo "  it only needs to run if you want to define custom fan curves, in which"
  echo "  case the daemon will read from ~/.amdpwrfan to determine the curves,"
  echo "  which can be set by manually editing the file or using the fancurve set"
  echo "  command, which will create the file for you. See README.md for an"
  echo "  example config, or simply 'use $me fancurve enable' without a"
  echo "  config and $me will create a default one for you."
  echo
  echo "  [fancurves] should be formatted as follows:"
  echo "  temp:speed for every temperature/speed you want to add"
  echo "  values between specified values will be interpolated"
  echo
  echo "  Example: To set the fan curve to 0% at 25 C, 25% at 40 C, 50% at 50 C"
  echo "  and 75% at 60 C, updating every 5 seconds for GPU 0, you would use:"
  echo
  echo "  sudo $me fancurve set 5 25:0 40:25 50:50 60:75 65:100 0"
  echo
}

checkbashver

if [[ $# -eq 0 ]] ; then
  usage
  exit 0
fi

# Parse options
while getopts ":h" opt; do
  case ${opt} in
    h )
	usage
	exit 0
    ;;
    \? )
	echo "Invalid option: -$OPTARG" 1>&2
    ;;
  esac
done
shift $((OPTIND -1))

subcommand=$1; shift

#    shift $((OPTIND -1))
case "$subcommand" in
  help ) 
	usage
	exit 0
  ;;
  status | show )
	gpu=$1;
	if [ -z $gpu ] || ! [[ "$gpu" =~ $isnum ]] ; then
		gpu=0
	fi

	echo status for GPU${gpu}

	if [ ! -d /sys/class/drm/card${gpu} ] ; then
		echo "Error: Unable to find GPU${gpu}"
		echo ; exit 1
	fi

	powercap=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap`
	watts=$(expr $powercap / 1000000)

	fanspeedmode=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable`

	fanspeedpwm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1`
	fanspeedpct=$(expr $fanspeedpwm / 255 \* 100)

	fanspeedrpm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/fan1_input`
	fanspeedrpmfrm=`echo $fanspeedrpm | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`
	fanspeedmaxrpm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/fan1_max`
	fanspeedmaxrpmfrm=`echo $fanspeedmaxrpm | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`
	fanspeedminrpm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/fan1_min`
	fanspeedminrpmfrm=`echo $fanspeedminrpm | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`
	fanspeedtargetrpm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/fan1_target`
	fanspeedtargetfrm=`echo $fanspeedtargetrpm | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`

	pwrusage=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_average`
	pwrusagemw=`echo "scale = 2; $pwrusage / 1000" | bc | awk '{printf "%.f\n", $0}'`
	pwrusagewatts=`echo "scale = 2; $pwrusage / 1000000" | bc | awk '{printf "%.2f\n", $0}'`
	pwrusagemwfrm=`echo $pwrusagemw | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`

	powercapmax=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap_max`
	powercapmin=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap_min`

	powercapmaxwatts=$(expr $powercapmax / 1000000)
	powercapminwatts=$(expr $powercapmin / 1000000)

	pcilinkspeed=`cat /sys/class/drm/card${gpu}/device/current_link_speed`
	pcilinkwidth=`cat /sys/class/drm/card${gpu}/device/current_link_width`
	maxpcilinkspeed=`cat /sys/class/drm/card${gpu}/device/max_link_speed`
	maxpcilinkwidth=`cat /sys/class/drm/card${gpu}/device/max_link_width`
	
	#not working
	pciaddr=`ls /sys/class/drm/card${gpu}/device/driver | sort -n | head -1`

	pcideviceid=`cat /sys/class/drm/card${gpu}/device/device`
	pcivendorid=`cat /sys/class/drm/card${gpu}/device/vendor`

	pcisubvendorid=`cat /sys/class/drm/card${gpu}/device/subsystem_vendor`
	pcisubdeviceid=`cat /sys/class/drm/card${gpu}/device/subsystem_device`

	if [ $pcivendorid == "0x1002" ] ; then 
		pcivendorname="Advanced Micro Devices, Inc. [AMD/ATI]"
	elif [ $pcivendorid == "0x10de" ] ; then 
		pcivendorname="NVIDIA Corporation"
	elif [ $pcivendorid == "0x8086" ] ; then 
		pcivendorname="Intel Corporation"
	else
		pcivendorname="Unknown"
	fi

	#TODO: need to add a database of devices
	if [ $pcideviceid == "0x67df" ] ; then 
		pcidevicename="Radeon RX570 (4GB)"
	else
		pcidevicename="Unknown (Coming Soon)"
	fi

	#TODO: database of individual cards too? users would have to submit? 2*complicated?
	if [ $pcisubdeviceid == "0x341a" ] ; then 
		pcisubdevicename="RX470 Armor (4GB)"
	else
		pcisubdevicename="Unknown (Coming Soon)"
	fi

	if [ $pcisubvendorid == "0x1462" ] ; then 
		pcisubvendorname="Micro-Star International Co., Ltd. [MSI]"
	else
		pcisubvendorname="Unknown (Coming Soon)"
	fi

	vddgfx=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/in0_input`

	# temperature isnt reported with decimals or we would use bc and keep them
	temperature=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/temp1_input`
	temperature=$(expr $temperature / 1000)
	tempinF=$(echo "scale=2;((9/5) * $temperature) + 32" |bc)

	gpuusage=`cat /sys/class/drm/card${gpu}/device/gpu_busy_percent`
	vramusage=`cat /sys/class/drm/card${gpu}/device/mem_busy_percent`

	freq1=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/freq1_input`
	freq1mhz=$(echo "scale=2; $freq1 / 1000000" | bc | awk '{printf "%.2f\n", $0}')
	freq1name=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/freq1_label`

	freq2=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/freq2_input`
	freq2mhz=$(echo "scale=2; $freq2 / 1000000" | bc | awk '{printf "%.2f\n", $0}')
	freq2name=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/freq2_label`

	if [ $freq1name == "sclk" ] ; then 
		freq1friendlyname="GPU clock"
	else
		freq1friendlyname="Unknown clock (usually GPU)"
	fi

	if [ $freq2name == "mclk" ] ; then 
		freq2friendlyname="Memory clock"
	else
		freq2friendlyname="Unknown clock (usually memory)"
	fi

	memused=`cat /sys/class/drm/card${gpu}/device/mem_info_vram_used`
	memtotal=`cat /sys/class/drm/card${gpu}/device/mem_info_vram_total`
	memfree=$(expr $memtotal - $memused)

	memusedmb=$(echo "scale=2; $memused / 1048576" | bc | awk '{printf "%.2f\n", $0}')
	memtotalmb=$(echo "scale=2; $memtotal / 1048576" | bc | awk '{printf "%.2f\n", $0}')

	mempctused=$(echo "scale=4; $memused / $memtotal * 100" | bc | awk '{printf "%.2f\n", $0}')
	mempctfree=$(echo "scale=4; $memfree / $memtotal * 100" | bc | awk '{printf "%.2f\n", $0}')

	readarray memclocks < /sys/class/drm/card${gpu}/device/pp_dpm_mclk
	readarray gpuclocks < /sys/class/drm/card${gpu}/device/pp_dpm_sclk

	availmemclks=""

	for i in "${!memclocks[@]}"; do
	    memclocks[i]=`echo "${memclocks[i]}"` #strip newlines
	    IFS=' ' read -r -a memclk <<< ${memclocks[i]}
		for x in "${!memclk[@]}"; do
			IFS=':' read -r -a split <<< ${memclk[x]}
			memclk[x]=${split[0]}
			if (( x == 1 )) ; then 
				availmemclks=`echo $availmemclks ${memclk[x]}`
				memclks[i]=${memclk[x]}
			fi
			if (( x == 2 )) ; then
				availmemclks=`echo ${availmemclks}*`
				curmemclk=$i;
			fi
		done
	done


#	for c in "${!memclks[@]}"; do
#		echo "memclks $c: ${memclks[c]}"
#	done

	for i in "${!gpuclocks[@]}"; do
	    gpuclocks[i]=`echo "${gpuclocks[i]}"` #strip newlines
	    IFS=' ' read -r -a gpuclk <<< ${gpuclocks[i]}
		for x in "${!gpuclk[@]}"; do
			IFS=':' read -r -a split <<< ${gpuclk[x]}
			gpuclk[x]=${split[0]}
			if (( x == 1 )) ; then 
				availgpuclks=`echo $availgpuclks ${gpuclk[x]}`
				gpuclks[i]=${gpuclk[x]}
			fi
			if (( x == 2 )) ; then
				availgpuclks=`echo ${availgpuclks}*`
				curgpuclk=$i;
			fi
		done
	done

#	echo "curgpuclk: $curgpuclk ${gpuclks[curgpuclk]}"

	dover

	if [ $myuser == "root" ] ; then 
		pcidev=`cat /sys/kernel/debug/dri/${gpu}/name`
		echo "GPU${gpu}: ${pcidev}"
	fi

	echo "GPU${gpu}: PCIe Device ${pciaddr} Link Speed is ${pcilinkwidth}x ${pcilinkspeed} (GPU Max: ${maxpcilinkwidth}x ${maxpcilinkspeed})"
	echo "GPU${gpu}: Vendor ID: ${pcivendorid} / ${pcivendorname}"
	echo "GPU${gpu}: Device ID: ${pcideviceid} / ${pcidevicename}"
	echo "GPU${gpu}: Sub-Vendor ID: ${pcisubvendorid} / ${pcisubvendorname}"
	echo "GPU${gpu}: Sub-Device ID: ${pcisubdeviceid} / ${pcisubdevicename}"
	echo "GPU${gpu}: Current GPU Usage is ${gpuusage}% (gpu_busy)"
	echo "GPU${gpu}: Current ${freq1friendlyname} speed is ${freq1mhz} mHz ($freq1name - freq1)"
	echo "GPU${gpu}: Current ${freq2friendlyname} speed is ${freq2mhz} mHz ($freq2name - freq2)"
	echo "GPU${gpu}: Power Profile GPU Clocks: $availgpuclks"
	echo "GPU${gpu}: Power Profile Mem Clocks: $availmemclks"
	echo "GPU${gpu}: Current GPU Power Profile: $curgpuclk @ ${gpuclks[curgpuclk]} mHz (${freq1mhz} mHz actual)"
	echo "GPU${gpu}: Current Mem Power Profile: $curmemclk @ ${memclks[curmemclk]} mHz (${freq2mhz} mHz actual)"
	echo "GPU${gpu}: Current VRAM Activity is ${vramusage}% (mem_busy)"
	echo "GPU${gpu}: VRAM Used: ${mempctused}% used $memusedmb MB (${memused} bytes)"
	echo "GPU${gpu}: VRAM Total: ${mempctfree}% free $memtotalmb MB (${memtotal} bytes)"
	echo "GPU${gpu}: Temperature is $temperature deg. C ($tempinF deg. F)"
	echo "GPU${gpu}: Power limit is ${watts} watts (Min: ${powercapminwatts}w - Max: ${powercapmaxwatts}w)"
	echo "GPU${gpu}: Power usage is ${pwrusagewatts} watts ($pwrusagemwfrm mW)"
	echo -n "GPU${gpu}: Voltage is currently $vddgfx mV ("
	myvolts=`echo "scale = 2; $vddgfx / 1000" | bc | awk '{printf "%.3f\n", $0}'`
	echo "$myvolts V)"
	echo "GPU${gpu}: Fan speed for is ${fanspeedpct}% ($fanspeedrpmfrm RPM, Min: $fanspeedminrpmfrm RPM - Max: $fanspeedmaxrpmfrm RPM)"
	echo -n "GPU${gpu}: Fan control is set to "

	if [ $fanspeedmode == "1" ] ; then
		echo "manual"
	elif [ $fanspeedmode == "2" ] ; then
		echo "automatic with a target of $fanspeedtargetfrm RPM"
	else
		echo "unknown"
	fi
      echo ; exit 0
    ;;
    power )
	gpu=$2
	if [ -z $gpu ] || ! [[ "$gpu" =~ $isnum ]] ; then
		gpu=0
	fi

	if [ ! -d /sys/class/drm/card${gpu} ] ; then
		echo "Error: Unable to find GPU${gpu}"
		echo ; exit 1
	fi

	if [ -z $1 ] || ! [[ "$1" =~ $isnum ]]  ; then 
		if [ $1 != 'reset' ] ; then 
			echo "Error: You must specify a power limit in watts"
			usage
		exit 1
		else

			if [ $myuser != "root" ] ; then 
				echo "Error: root is required to modify values, try: sudo $mycmd"
				echo ; exit 1
			fi

			echo -n "Attempting to reset power cap to default .."
			oldpowercap=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap`
			sleep $wait ; echo -n ".."
			echo 0 > /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap
			sleep $wait ; echo -n ".."
			powercap=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap`
			sleep $wait ; echo -n ".."

			oldpowercapwatts=$(expr $oldpowercap / 1000000)
			powercapwatts=$(expr $powercap / 1000000)

			if [ $powercap -ne $oldpowercap ] ; then
				echo ".. Power cap changed"
				echo "Previous Power Cap: $oldpowercapwatts watts"
				echo "New Power Cap: $powercapwatts watts (set by driver)"
				echo ; exit 0
			else
				echo ".. Power cap was not changed"
				echo "The default power cap may be the same as the previous power cap."
				echo "Previous Power Cap: $oldpowercapwatts watts"
				echo "New Power Cap: $powercapwatts watts"
				echo ; exit 1
			fi
		fi
	fi

	oldpowercap=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap`
	powercapmax=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap_max`
	powercapmin=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap_min`

	oldpowercapwatts=$(expr $oldpowercap / 1000000)
	powercapmaxwatts=$(expr $powercapmax / 1000000)
	powercapminwatts=$(expr $powercapmin / 1000000)

	newpowercap=$(expr $1 \* 1000000)

	if (( $newpowercap > $powercapmax || $newpowercap < $powercapmin || $newpowercap == 0)) ; then 
		echo "Error: The power cap you have requested ($1 watts) is outside the range of GPU${gpu}"
		echo "GPU${gpu} specifies that it accepts power caps from $powercapminwatts watts to $powercapmaxwatts watts"
		echo "You also cannot specify a power cap of 0 watts"
		echo ; exit 1
	fi

	if [ $newpowercap -eq $oldpowercap ] ; then 
		echo "GPU${gpu} is already set to ${1} watts"
		echo ; exit 1
	fi

	if [ $myuser != "root" ] ; then 
		echo "Error: root is required to modify values, try: sudo $mycmd"
		echo ; exit 1
	fi

	echo "Setting power cap for GPU${gpu} to ${1} watts"

	echo $newpowercap > /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap

	sleep $wait

	echo -n "Checking if applied successfully .."

	sleep $wait

	echo -n ".."

	powercap=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap`
	powercapwatts=$(expr $powercap / 1000000)

	if [ $newpowercap -ne $powercap ] ; then 
		echo ".. FAILED"
		echo "$me was not able to apply the requested power settings"
		if [ $powercap -ne $oldpowercap ] ; then
			echo "The power cap was still changed, your request may have been out of range."
			echo "The old power cap reported by the driver was $oldpowercapwatts"
			echo "The new power cap reported by the driver is $powercapwatts"
		fi
		echo ; exit 1
	else
		if [ $powercap -eq $oldpowercap ] ; then 
			echo ".. NO CHANGE"
		else
			echo ".. OK"
		fi
		echo ; exit 0
	fi

    ;;
    _amdpwrfan_start )
	gpu=$2
	if [ -z $gpu ] ; then
		gpu=0
	fi

	if [ $parent != "amdpwrman" ] ; then
		log "Error: this command is used internally by amdpwrman and is not meant to be called directly. (${parent})"
		log "To enable fancurve control, use 'sudo amdpwrman fancurve enable'"
		exit 1
	fi

	if [ $myuser != "root" ] ; then 
		log "Error: root is required to fancurve!"
		exit 1
	fi

	log "amdpwrman fancurve daemon loaded .."

	log "Enabling manual fan control for GPU $gpu.."

	amdpwrman fan enable $gpu

	trap 'log amdpwrman fancurve daemon exiting ..;amdpwrman fan disable;exit 0' SIGUSR1
#	trap 'log received kill signal!' SIGUSR1 # for testing force-kill

	declare -A fancurves

	if [ ! -f ~/.amdpwrfan ] ; then 
		log "No fan curve file found, creating a default for GPU $gpu at ~/.amdpwrfan"
		echo "5 25:25 50:50 60:75 70:100 $gpu" > ~/.amdpwrfan
	fi

	while [ 0 ] ; do
		# this is where we do our fanmagic
		fanmode=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable`

		fanspeedpwm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1`
		fanspeedpct=$(expr $fanspeedpwm / 255 \* 100)

		temperature=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/temp1_input`
		temperature=$(expr $temperature / 1000)

#		fanspeedrpm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/fan1_input`
#		fanspeedrpmfrm=`echo $fanspeedrpm | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`
#		fanspeedmaxrpm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/fan1_max`
#		fanspeedmaxrpmfrm=`echo $fanspeedmaxrpm | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`
#		fanspeedminrpm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/fan1_min`
#		fanspeedminrpmfrm=`echo $fanspeedminrpm | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`
#		fanspeedtargetrpm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/fan1_target`
#		fanspeedtargetfrm=`echo $fanspeedtargetrpm | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`

#		pwrusage=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_average`
#		pwrusagemw=`echo "scale = 2; $pwrusage / 1000" | bc | awk '{printf "%.f\n", $0}'`
#		pwrusagewatts=`echo "scale = 2; $pwrusage / 1000000" | bc | awk '{printf "%.2f\n", $0}'`
#		pwrusagemwfrm=`echo $pwrusagemw | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'`

#		powercapmax=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap_max`
#		powercapmin=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/power1_cap_min`

		if (( $fanmode == 2 )) ; then 
			log "Something has reset fan control to automatic mode - exiting.."
			exit 1
		elif (( $fanmode == 1 )) ; then
			log "Fan mode is still manual - good!"

			log "Reading fancurves from ~/.amdpwrfan .."

			readarray fancurvesfile < ~/.amdpwrfan

			for i in "${!fancurvesfile[@]}"; do 
				IFS=' ' read -r -a fcsplit <<< ${fancurvesfile[i]}

				for x in "${!fcsplit[@]}"; do 
					if (( x == 0 )) ; then 
						fanwait=${fcsplit[x]}
					else
						IFS=':' read -r -a fcsplit2 <<< ${fcsplit[x]}
						if [ -z ${fcsplit2[1]} ] ; then 
							reqgpu=${fcsplit2[0]}
						else
							fancurves_temp[x]=${fcsplit2[0]}
							fancurves_target[x]=${fcsplit2[1]}
						fi
					fi
				done

				for x in "${!fancurves_temp[@]}"; do 
					fancurves[$reqgpu.${fancurves_temp[x]}]=${fancurves_target[x]} #fake2d
				done
			done

			mygpuentries=0
			for i in "${!fancurves[@]}"; do 
				IFS='.' read -r -a isplit <<< $i

				if [[ $gpu == ${isplit[0]} ]] ; then 
					mygpufound=true
#					log "For GPU ${isplit[0]} and temperature ${isplit[1]} fan speed target is ${fancurves[$i]}"
#					log "GPU $gpu current fan speed is $fanspeedpct and temperature is $temperature"

					mygpucurve_temp[mygpuentries]=${isplit[1]}
					mygpucurve_target[mygpuentries]=${fancurves[$i]}

					(( mygpuentries++ ))
				fi
			done

			mygputemplist=""
#			mygpucurvelist=""
			if (( mygpuentries == 0 )) ; then 
				log "While a fan curve file was found, no settings for GPU $gpu were found in the file, so we will add default settings for this GPU."
				echo "5 25:25 50:50 60:75 70:100 $gpu" >> ~/.amdpwrfan
			else
				log "Read $mygpuentries entries for GPU $gpu"

				for i in "${!mygpucurve_temp[@]}"; do 
					mygputemplist="$mygputemplist ${mygpucurve_temp[$i]}"
#					mygpucurvelist="$mygpucurvelist ${mygpucurve_temp[$i]}:${mygpucurve_target[$i]}"
#					log "GPU $gpu Temperature ${mygpucurve_temp[$i]} : ${mygpucurve_target[$i]}%"
				done

				nearesttarget=`echo $mygputemplist | awk -v VAL=$temperature -v RS=" " '{
				        D=(VAL - $1) * (VAL - $1);

				        if((VAL<=$1)&&(((!SETA) || (D < DIFFA))))
				        {
				                DIFFA=D;
				                XA=$1;
				                SETA=1;
				        }

				        if((VAL>=$1)&&(((!SETB) || (D < DIFFB))))
				        {
				                DIFFB=D;
				                XB=$1;
			        	        SETB=1;
				        }
				}

				END {   if(!SETA)       printf("%s", XB);
				        else            printf("%s", XA);

#				        if(!SETB)       print "No lesser bound";
#				        else            printf("Closest lesser bound was %s\n", XB);   
					}'`


				for i in "${!mygpucurve_temp[@]}"; do 
					if (( ${mygpucurve_temp[i]} == $nearesttarget )) ; then
						log "Setting GPU${gpu} fan speed to ${mygpucurve_target[$i]}%"
						log "Current Temp: $temperature deg C - Nearest Target: $nearesttarget deg C @ ${mygpucurve_target[$i]}%"
						amdpwrman fan ${mygpucurve_target[i]} $gpu
					fi
				done
			fi

		fi

		sleep $fanwait
	done
    ;;
    fancurve )
	gpu=$2
	if [ -z $gpu ] ; then
		gpu=0
	fi

	cmd=$1
#	if [ -z $1 ] || (( $1 < 0  || $1 > 100 )) || ! [[ "$1" =~ $isnum ]] ; then 
	    if [ "$cmd" != "enable" ] && [ "$cmd" != "disable" ] ; then 
		echo "Error: Invalid fancurve command, you must specify a curve (see help) or 'enable' or 'disable'"
		usage
		exit 1
	    fi
#	fi

	if [ ! -d /sys/class/drm/card${gpu} ] ; then
		echo "Error: Unable to find GPU${gpu}"
		echo ; exit 1
	fi

	if [ $myuser != "root" ] ; then 
		echo "Error: root is required to modify fan speeds."
		echo ; exit 1
	fi

	if [ $1 == 'enable' ] ; then 
		pwrmancnt=`pgrep amdpwrman | wc -l`; (( pwrmancnt-- ))
		if (( pwrmancnt == 2 )) ; then 
			echo "Error: amdpwrman fan daemon is already running, fancurve control should be enabled already"
			echo ; exit 1
		fi
		if (( pwrmancnt == 1 )) ; then 
			(amdpwrman _amdpwrfan_start $gpu > ~/.amdpwrfan.log)&
#			(amdpwrman _amdpwrfan_start $gpu)&
			echo "Started amdpwrman fan daemon ($!)"
			echo "Log file is at ~/.amdpwrfan.log"
			sleep $longwait
			echo ; exit 0
		fi
	fi

	if [ $1 == 'disable' ] ; then 
		pwrmanpids=( $(pgrep amdpwrman) )
		pwrmancnt=${#pwrmanpids[@]}
		pwrfancnt=0

		for i in "${!pwrmanpids[@]}"; do
			if (( pwrmanpids[i] != $$ )) ; then # kill all pids that arent me..?
				(( pwrfancnt++ ))
				kill -SIGUSR1 ${pwrmanpids[i]}
				echo "Sent signal to kill fancurve daemon.."
				sleep $longwait

				# check if killed and fan control set to auto or manual
				dblpwrmanpids=( $(pgrep amdpwrman) )
				dblpwrmancnt=${#pwrmanpids[@]}
				dblpwrfancnt=0

				for i in "${!dblpwrmanpids[@]}"; do
					if (( dblpwrmanpids[i] != $$ )) ; then 
						(( dblpwrfancnt++ ))
						echo "..was not stopped nicely..forcing it to stop.."
						kill ${pwrmanpids[i]}
						echo "..attempting to force fans to full speed in manual mode.."
						amdpwrman fan enable $gpu
						amdpwrman fan 100 $gpu
					fi
				done

				if (( dblpwrfancnt == 0 )) ; then 
					sleep $longwait
					fanmode=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable`

					if (( $fanmode == 2 )) ; then 
						echo "Daemon appears to have stopped correctly - fan speeds have been reset to default automatic mode."
						echo ; exit 0
					else
						echo "Daemon seems to have been killed but did not set the fans back to auto - attempting to force fans to full speed in manual mode.."
						amdpwrman fan enable $gpu
						amdpwrman fan 100 $gpu
						echo ; exit 1
					fi

				fi
			fi
		done

		if (( pwrfancnt == 0 )) ; then 
			echo "Error: amdpwrman fan daemon was not already running, fancurve control was not enabled"
			echo ; exit 1
		fi
	fi
    ;;
    fan )
	gpu=$2
	if [ -z $gpu ] ; then
		gpu=0
	fi

	cmd=$1
	#TODO: we should tolerate if they suffix with %
	if [ -z $1 ] || (( $1 < 0  || $1 > 100 )) || ! [[ "$1" =~ $isnum ]] ; then 
	    if [ "$cmd" != "enable" ] && [ "$cmd" != "disable" ] ; then 
		echo "Error: You must specify a fan speed in percent (0 - 100)"
		usage
		exit 1
	    fi
	fi

	if [ ! -d /sys/class/drm/card${gpu} ] ; then
		echo "Error: Unable to find GPU${gpu}"
		echo ; exit 1
	fi

	if [ $myuser != "root" ] ; then 
		echo "Error: root is required to modify values, try: sudo $mycmd"
		echo ; exit 1
	fi

	if [ $1 == 'enable' ] ; then 
		fanmode=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable`

		if (( $fanmode == 1 )) ; then 
			echo "Error: Manual control is already enabled."
			echo ; exit 1
		fi

		echo -n  "Enabling manual fan speed control for GPU${gpu} .."

		sleep $wait

		echo 1 > /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable

		sleep $wait

		fanmode=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable`

		if (( $fanmode == 1 )) ; then 
			echo ".. OK"
			echo ; exit 0
		else
			echo ".. FAILED"
			echo ; exit 1
		fi
	fi

	if [ $1 == 'disable' ] ; then 
		fanmode=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable`

		if (( $fanmode == 2 )) ; then 
			echo "Error: Manual control is already disabled."
			echo ; exit 1
		fi

		echo -n  "Disabling manual fan speed control for GPU${gpu} .."
		sleep $wait

		echo 2 > /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable

		sleep $wait

		fanmode=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable`

		if (( $fanmode == 2 )) ; then 
			echo ".. OK"
			echo ; exit 0
		else
			echo ".. FAILED"
			echo ; exit 1
		fi
	fi

	fanmode=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1_enable`

	if (( $fanmode != 1 )) ; then 
		echo "Error: Fan mode is not set to manual."
		echo "You can use $me fan enable <gpu> to enable fan control."
		echo ; exit 1
	else
		newpwm=$(expr $1 \* 255 / 100)
		oldpwm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1`

		oldpwmpct=$(expr $oldpwm \* 100 / 255)

		echo "Current fan speed: ${oldpwmpct}% (${oldpwm} / 255)"

		echo -n "Attempting to set fan speed for GPU${gpu} to ${1}% (${newpwm} / 255) .."

		sleep $wait

		echo -n ".."
		echo $newpwm > /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1

		sleep $wait

		pwm=`cat /sys/class/drm/card${gpu}/device/hwmon/hwmon${gpu}/pwm1`

		if (( $pwm != $oldpwm )) ; then 
			echo ".. FAN SPEED CHANGED"
			newpwmpct=$(expr $pwm \* 100 / 255)
			echo "Requested Speed: ${1}% ($newpwm / 255)"
			echo "New speed: ${newpwmpct}% (${pwm} / 255)"
			echo ; exit 0
		else
			echo ".. FAN SPEED NOT CHANGED"
			echo ; exit 1
		fi


	fi

    ;;
    recover )
	gpu=$1
	if [ -z $gpu ] ; then
		gpu=0
	fi

	if [ ! -d /sys/class/drm/card${gpu} ] ; then
		echo "Error: Unable to find GPU${gpu}"
		echo ; exit 1
	fi

	if [ $myuser != "root" ] ; then 
		echo "Error: root is required to recover GPU, try: sudo $mycmd"
		echo ; exit 1
	fi

	echo -n "Attempting to recover GPU${gpu} .."

	sleep $wait

	result=`cat /sys/kernel/debug/dri/${gpu}/amdgpu_gpu_recover`

	sleep $wait
	sleep $wait

	# can we find a better way to check that the GPU has been recovered?
	# is there a way to force a hang for testing?
	if [ ! -d /sys/kernel/debug/dri/0 ] || [[ $result != "gpu recover" ]] ; then
		echo ".. FAILED"
		echo "Error: Could not find GPU${gpu} interface after recovery."
		echo ; exit 1
	else
		echo ".. SUCCESS"
		echo "Note: A reboot may still be needed to fully recover GPU${gpu}."
		echo ; exit 0
	fi
    ;;
    * )
	if [ ! -z $subcommand ] ; then
	  echo "Invalid command '$subcommand'"
	  usage
	fi
	exit 1
    ;;
esac
